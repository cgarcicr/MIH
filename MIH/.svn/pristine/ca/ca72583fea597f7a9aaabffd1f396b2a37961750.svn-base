package com.sophos.semih.bean;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.web.jsf.FacesContextUtils;

import com.sophos.semih.model.TMihEntidad;
import com.sophos.semih.model.TMihParametro;
import com.sophos.semih.model.TMihUsuario;
import com.sophos.semih.service.CargaManager;
import com.sophos.semih.service.EntidadManager;
import com.sophos.semih.service.ParametroManager;
import com.sophos.semih.util.CommandExecuter;
import com.sophos.semih.util.Utilidades;

@ManagedBean
@ViewScoped
public class CargaInfoHistoricaBean extends BaseBean {
	
	private static final long serialVersionUID = -162443766249729812L;
	private List<TMihEntidad> entidades;
	private List<String> archivos;
	private ArrayList<String> listaSeparadores;
	private CargaManager gManager;
	
	private String tipoCarga;
	private boolean encabezado;
	private String nombreEntidad;
	private String archivo;	
	private String delimiter;
	private boolean popupVisible;

	private TMihUsuario usuario;
	
	private EntidadManager entManager;
	private ParametroManager paramManager;
	private BeanFactory factory;
	private static final Log log = LogFactory.getLog(CargaInfoHistoricaBean.class);
	
	
	public CargaInfoHistoricaBean(){
		
		setUsuario(new TMihUsuario());
		factory = FacesContextUtils.getWebApplicationContext(FacesContext.getCurrentInstance());
		
		//Se obtiene la ruta
		setParamManager((ParametroManager) factory.getBean("parametroManager"));
		TMihParametro parametro = paramManager.getParametroById("RUTA_CARGA");
		
		//Se obtiene el delimitador
		TMihParametro separadores = paramManager.getParametroById("UPLOAD_DELIMITER");
		listaSeparadores = splitString(separadores);
		
		//**Se obtiene la lista de archivos
		this.setArchivos(Utilidades.getNombresArchivos(parametro.getValor()));
		
		//Se obtienen las entidades asociadas al usuario
		setEntManager((EntidadManager) factory.getBean("entidadManager"));
		this.setEntidades(entManager.getEntidadesxUsuario());				
		
	}


	public ArrayList<String> getListaSeparadores() {
		return listaSeparadores;
	}


	public void setListaSeparadores(ArrayList<String> listaSeparadores) {
		this.listaSeparadores = listaSeparadores;
	}


	public List<TMihEntidad> getEntidades() {
		return entidades;
	}


	public void setEntidades(List<TMihEntidad> entidades) {
		this.entidades = entidades;
	}
	
		
	public String getTipoCarga() {
		return tipoCarga;
	}


	public void setTipoCarga(String tipoCarga) {
		this.tipoCarga = tipoCarga;
	}


	public String getDelimiter() {
		return delimiter;
	}


	public void setDelimiter(String delimiter) {
		this.delimiter = delimiter;
	}


	public boolean isEncabezado() {
		return encabezado;
	}


	public void setEncabezado(boolean encabezado) {
		this.encabezado = encabezado;
	}


	public String getNombreEntidad() {
		return nombreEntidad;
	}


	public void setNombreEntidad(String nombreEntidad) {
		this.nombreEntidad = nombreEntidad;
	}


	public List<String> getArchivos() {
		return archivos;
	}


	public void setArchivos(List<String> archivos) {
		this.archivos = archivos;
	}


	public String getArchivo() {
		return archivo;
	}


	public void setArchivo(String archivo) {
		this.archivo = archivo;
	}


	public EntidadManager getEntManager() {
		return entManager;
	}


	public void setEntManager(EntidadManager entManager) {
		this.entManager = entManager;
	}
	

	public ParametroManager getParamManager() {
		return paramManager;
	}


	public void setParamManager(ParametroManager paramManager) {
		this.paramManager = paramManager;
	}
	
	
	public boolean isPopupVisible() {
		return popupVisible;
	}


	public void setPopupVisible(boolean popupVisible) {
		this.popupVisible = popupVisible;
	}


	@SuppressWarnings("unused")
	public String cargarArchivo(){

		String originalFile;
		String encabezado = (this.isEncabezado()? "S" : "N");

		try{

			factory = FacesContextUtils.getWebApplicationContext(FacesContext.getCurrentInstance());
			gManager = (CargaManager)factory.getBean("cargaManager");
			HashMap<String, String> sqlldrVarEntorno = new HashMap<String, String>();
			String sqlldrCommand = "./sqlldr";	
			DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
			Date date = new Date();			
			String stamp = dateFormat.format(date);
			String contenido = null;
			String registro = null;
			Character separatorS = File.separatorChar; 
			String separadorRuta = Character.toString(separatorS);
						
			setEntManager((EntidadManager) factory.getBean("entidadManager"));
			this.setEntidades(entManager.getEntidadesxUsuario());			
			
			//Se define la ruta de carga
			String directorioCrg = paramManager.getParametroById("RUTA_CARGA").getValor();
			
			//Se define la ruta de control
			String directorioCtl = paramManager.getParametroById("RUTA_CONTROL").getValor();
			
			//Definici√≥n del sistema operativo
			TMihParametro os = paramManager.getParametroById("WIN_OS_SERVER");
			
			//Se genera el archivo .dat
			originalFile = directorioCrg + separadorRuta + this.getArchivo();
			String archivoOut = directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".dat";
			archivo = CommandExecuter.copiarArchivoOS(originalFile, archivoOut, os.getValor());	
			
			//Se elimina el archivo original
			String eliminar = Utilidades.borrarArchivo(originalFile);
//			boolean isUtf8 = Utilidades.detectarCharsetUTF8Charset(originalFile);
//			if (!isUtf8) {
//				super.setMessage("historicos.prevalidador.encodign", BaseBean.WARNING, null, null);
//			}
			
			//Se define el nombre del archivo de control
			String nombreArchivo = directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".ctl";
						
			//Se realiza la consulta de los parametros del archivo de control
			String consulta = gManager.generaArchivoControl(this.getNombreEntidad(), this.getArchivo(), stamp, this.getTipoCarga(), encabezado, this.getDelimiter(), separadorRuta, contenido);
			
			//Se genera el archivo de control
			String nombreArchivoCtl = Utilidades.setContenidoArchivo(nombreArchivo, consulta.getBytes());
			
			/************
			* 
			* Parametros para la ejecucion del sql loader
			* 
			*/
			//Definicion del directorio donde estan los binarios
			TMihParametro sqlldrDirectory = paramManager.getParametroById("ORACLE_HOME");
			String sqlldrDirectoryt = sqlldrDirectory.getValor() + separadorRuta + "bin";
			
			//Definicion del comando a ejecutar
			if (os.getValor().equals("true")){
			sqlldrCommand = "sqlldr.exe";			
			}
			
			//Definicion del oracle home
			sqlldrVarEntorno.put("ORACLE_HOME",sqlldrDirectory.getValor());
			
			//Definicion del oracle sid
			TMihParametro oracle_sid = paramManager.getParametroById("ORACLE_SID");
			sqlldrVarEntorno.put("ORACLE_SID",oracle_sid.getValor());
			
			//Definicion del oracle lang
			TMihParametro oracle_lang = paramManager.getParametroById("NLS_LANG");
			sqlldrVarEntorno.put("NLS_LANG",oracle_lang.getValor());
			
			//Definicion del usario para la conexion
			TMihParametro oracle_user = paramManager.getParametroById("ORACLE_USER");
			TMihParametro oracle_password = paramManager.getParametroById("ORACLE_PASSWORD");
			String oracle_password_decifrado = Utilidades.decrypt(oracle_password.getValor());
			String sqlldrArgCredential = " " + oracle_user.getValor() + "/" + oracle_password_decifrado + "@" + oracle_sid.getValor(); 
			
			//Definicion del parametro del archivo de control
			String sqlldrArgControl = " CONTROL=" + nombreArchivoCtl ;
			
			//Definicion del archivo de log
			String sqlldrArgLog = " LOG=" + directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".log";
			
			//Definicion del maximo tamano de errores
			TMihParametro sqlldr_error = paramManager.getParametroById("MAX_UPLOAD_ERRORS");
			String sqlldrArgErrors = " ERRORS=" + sqlldr_error.getValor(); 
			
			//Definicion del archivo de log de la ejecucion de comandos
			String sqlldrLogCtl = directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".log";
			
			//Se ejecuta el comando 
			String ejecutarComando = CommandExecuter.ejecutarComandoOS
			(sqlldrCommand, sqlldrDirectoryt, sqlldrVarEntorno, sqlldrArgCredential, sqlldrArgControl, sqlldrArgErrors, sqlldrArgLog, sqlldrLogCtl);

			//Se genera registro de carga
			String registroControl = gManager.generaRegistroControl(
						this.getNombreEntidad(),
						this.getArchivo(),
						directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".log",
						directorioCtl + separadorRuta + this.getNombreEntidad() + stamp + ".bad", 
						registro);

		} catch (Exception e) {
			log.error("Error generado en la carga del archivo", e);
		}finally{
			
			this.popupVisible = false;
			try {
				FacesContext.getCurrentInstance().getExternalContext().redirect("carga_infoHistorica.xhtml");
			} catch (IOException e) {
				log.error("Error generado en la carga del archivo", e);
			}
		}
		
		return null;		
	}
	
	public ArrayList<String> splitString(TMihParametro separadores){
		
		ArrayList<String> listaSeparador = new ArrayList<String>();
		String delimiter = "-";
		String[] temporal;
		
		try {
			temporal = separadores.getValor().split(delimiter);
			for(int i =0; i < temporal.length ; i++)
				listaSeparador.add(temporal[i]);
			return listaSeparador;
		} catch (Exception e){
			log.error("Error en splitString", e);
		}
		return listaSeparadores;
	}
	
	public String limpiarFormulario(){
		this.refrescarValores();
		this.nombreEntidad = null;
		this.tipoCarga = null;
		this.encabezado = false;
		this.delimiter = null;
		this.archivo = null;
		super.clearMessages();
		return "";
		
//		try {
//			FacesContext.getCurrentInstance().getExternalContext().redirect("carga_infoHistorica.xhtml");
//		} catch (IOException e) {
//			log.error("Error al cargar la p√°gina", e);
//		}

	}
	
	public void refrescarValores(){
		ArrayList<String> ids = new ArrayList<String>();
		ids.add("cargaDatosform:codEntidad");
		ids.add("cargaDatosform:somModoCarga");
		ids.add("cargaDatosform:encabezado");
		ids.add("cargaDatosform:codSeparador");
		ids.add("cargaDatosform:somArchivo");
		super.resetValues(ids);
	}
	
	public String mostrarPopup(){
		this.popupVisible = true;
        
		Character separatorS = File.separatorChar; 
		String separadorRuta = Character.toString(separatorS);
		String directorioCrg = paramManager.getParametroById("RUTA_CARGA").getValor();
		String originalFile = directorioCrg + separadorRuta + this.getArchivo();
		
		boolean isUtf8 = Utilidades.detectarCharsetUTF8Charset(originalFile);
		if (!isUtf8) {
			super.setMessage("historicos.prevalidador.encodign", BaseBean.WARNING, "cargaDatosform:btnCargar", null);
		}
		
        return null;
	}
	
	public String ocultarPopup(){
		this.popupVisible = false;
        
        return null;
	}


	public TMihUsuario getUsuario() {
		return usuario;
	}


	public void setUsuario(TMihUsuario usuario) {
		this.usuario = usuario;
	}
	
}
